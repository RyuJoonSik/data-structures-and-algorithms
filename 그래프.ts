class 정점 {
  private 이웃_배열: 정점[] = [];

  constructor(private 값: any) {}

  이웃_추가하기_방향(새_정점: 정점) {
    this.이웃_배열.push(새_정점);
  }

  이웃_추가하기_무방향(새_정점: 정점) {
    this.이웃_배열.push(새_정점);
    새_정점.이웃_배열.push(this);
  }

  깊이_우선_순회하기(정점: 정점, 방문한_정점_해시: { [정점_값: string]: boolean } = {}) {
    방문한_정점_해시[정점.값] = true;

    console.log(정점.값);

    for (const 이웃 of 정점.이웃_배열) {
      if (방문한_정점_해시[이웃.값]) {
        continue;
      }

      정점.깊이_우선_순회하기(이웃, 방문한_정점_해시);
    }
  }

  깊이_우선_탐색하기(정점: 정점, 탐색_값: any, 방문한_정점_해시: { [정점_값: string]: boolean } = {}): 정점 | null {
    if (정점.값 === 탐색_값) {
      return 정점;
    }

    방문한_정점_해시[정점.값] = true;

    for (const 이웃 of 정점.이웃_배열) {
      if (방문한_정점_해시[이웃.값]) {
        continue;
      }

      if (이웃.값 === 탐색_값) {
        return 이웃;
      }

      const 찾은_정점 = 정점.깊이_우선_탐색하기(이웃, 탐색_값, 방문한_정점_해시);

      if (찾은_정점) {
        return 찾은_정점;
      }

      return null;
    }
  }

  너비_우선_순회하기(시작_정점: 정점) {
    const 큐 = [];
    const 방문한_정점_배열: { [정점_값: string]: boolean } = {};
    방문한_정점_배열[시작_정점.값] = true;

    큐.push(시작_정점);

    while (큐.length) {
      const 현재_정점 = 큐.shift();

      console.log(현재_정점.값);

      for (const 이웃 of 현재_정점.이웃_배열) {
        if (방문한_정점_배열[이웃.값]) {
          continue;
        }

        방문한_정점_배열[이웃.값] = true;

        큐.push(이웃);
      }
    }
  }
}

const $정점_앨리스 = new 정점('앨리스');
const $정점_밥 = new 정점('밥');
const $정점_신시아 = new 정점('신시아');

$정점_앨리스.이웃_추가하기_방향($정점_밥);
$정점_앨리스.이웃_추가하기_방향($정점_신시아);
$정점_밥.이웃_추가하기_방향($정점_신시아);
$정점_신시아.이웃_추가하기_방향($정점_밥);
$정점_앨리스.깊이_우선_순회하기($정점_앨리스); // 앨리스, 밥, 신시아
console.log($정점_앨리스.깊이_우선_탐색하기($정점_앨리스, '신시아')); // 정점 { '값': '신시아', '이웃_배열': [ 정점 { '값': '밥', '이웃_배열': [Array] } ] }
$정점_앨리스.너비_우선_순회하기($정점_앨리스); // 앨리스, 밥, 신시아

class 가중_그래프_정점 {
  private 이웃_배열: { [정점: string]: number } = {};

  constructor(private 값: any) {}

  이웃_추가하기(정점: 가중_그래프_정점, 가중치: number) {
    this.이웃_배열[정점.값] = 가중치;
  }
}

class 도시 {
  public 동선 = new Map<도시, number>();

  constructor(public 이름: string) {}

  동선_추가하기(도시: 도시, 비용: number) {
    this.동선.set(도시, 비용);
  }
}

const 애틀란타 = new 도시('애틀란타');
const 보스턴 = new 도시('보스턴');
const 시카고 = new 도시('시카고');
const 덴버 = new 도시('덴버');
const 엘페소 = new 도시('엘페소');

애틀란타.동선_추가하기(보스턴, 100);
애틀란타.동선_추가하기(덴버, 160);
보스턴.동선_추가하기(시카고, 120);
보스턴.동선_추가하기(덴버, 180);
시카고.동선_추가하기(엘페소, 80);
덴버.동선_추가하기(시카고, 40);
덴버.동선_추가하기(엘페소, 140);
엘페소.동선_추가하기(보스턴, 100);

console.log('다익스트라');

function 다익스트라_최단_경로_구하기(시작_도시: 도시, 도착_도시: 도시) {
  const 가장_저렴한_비용_테이블: { [도시_이름: string]: number } = {};
  const 가장_저렴한_이전_도시_테이블: { [도시_이름: string]: string } = {};
  const 방문_도시: { [도시_이름: string]: boolean } = {};
  가장_저렴한_비용_테이블[시작_도시.이름] = 0;
  let 미방문_도시_배열: 도시[] = [];
  let 현재_도시 = 시작_도시;

  while (true) {
    방문_도시[현재_도시.이름] = true;
    미방문_도시_배열 = 미방문_도시_배열.filter((미방문_도시) => 미방문_도시.이름 !== 현재_도시.이름);

    for (const [인접_도시, 비용] of 현재_도시.동선) {
      if (!방문_도시[인접_도시.이름]) {
        미방문_도시_배열.push(인접_도시);
      }

      const 현재_도시_경유_비용 = 가장_저렴한_비용_테이블[현재_도시.이름] + 비용;

      if (!가장_저렴한_비용_테이블[인접_도시.이름] || 현재_도시_경유_비용 < 가장_저렴한_비용_테이블[인접_도시.이름]) {
        가장_저렴한_비용_테이블[인접_도시.이름] = 현재_도시_경유_비용;
        가장_저렴한_이전_도시_테이블[인접_도시.이름] = 현재_도시.이름;
      }
    }

    if (!미방문_도시_배열.length) {
      break;
    }

    console.log(가장_저렴한_비용_테이블);

    let 가장_저렴한_비용 = Infinity;

    // 우선순위 큐를 사용하면 더 빠르다.
    for (const 미방문_도시 of 미방문_도시_배열) {
      if (가장_저렴한_비용_테이블[미방문_도시.이름] < 가장_저렴한_비용) {
        가장_저렴한_비용 = 가장_저렴한_비용_테이블[미방문_도시.이름];

        현재_도시 = 미방문_도시;
      }
    }
  }
  const 최단_경로: string[] = [];
  let 현재_도시_이름 = 도착_도시.이름;

  while (현재_도시_이름 !== 시작_도시.이름) {
    최단_경로.push(현재_도시_이름);
    현재_도시_이름 = 가장_저렴한_이전_도시_테이블[현재_도시_이름];
  }

  최단_경로.push(시작_도시.이름);

  return 최단_경로.reverse();
}

console.log(다익스트라_최단_경로_구하기(애틀란타, 엘페소));
