class 힙 {
    배열 = [];
    루트_노드_읽기() {
        return this.배열[0];
    }
    마지막_노드_읽기() {
        return this.배열[this.배열.length - 1];
    }
    삽입(값) {
        this.배열.push(값);
        let 새_노드_인덱스 = this.배열.length - 1;
        while (새_노드_인덱스 > 0 && this.배열[새_노드_인덱스] > this.배열[this.부모_노드_찾기(새_노드_인덱스)]) {
            [this.배열[this.부모_노드_찾기(새_노드_인덱스)], this.배열[새_노드_인덱스]] = [
                this.배열[새_노드_인덱스],
                this.배열[this.부모_노드_찾기(새_노드_인덱스)],
            ];
            새_노드_인덱스 = this.부모_노드_찾기(새_노드_인덱스);
        }
    }
    삭제() {
        this.배열[0] = this.배열.pop();
        let 트리클_노드_인덱스 = 0;
        while (this.더_큰_자식이_있는지(트리클_노드_인덱스)) {
            const 더_큰_자식_인덱스 = this.더_큰_자식_인덱스_계산하기(트리클_노드_인덱스);
            [this.배열[트리클_노드_인덱스], this.배열[더_큰_자식_인덱스]] = [
                this.배열[더_큰_자식_인덱스],
                this.배열[트리클_노드_인덱스],
            ];
            트리클_노드_인덱스 = 더_큰_자식_인덱스;
        }
    }
    더_큰_자식이_있는지(인덱스) {
        return ((this.배열[this.왼쪽_자식_노드_찾기(인덱스)] &&
            this.배열[this.왼쪽_자식_노드_찾기(인덱스)] > this.배열[인덱스]) ||
            (this.배열[this.오른쪽_자식_노드_찾기(인덱스)] &&
                this.배열[this.오른쪽_자식_노드_찾기(인덱스)] > this.배열[인덱스]));
    }
    더_큰_자식_인덱스_계산하기(인덱스) {
        if (!this.배열[this.오른쪽_자식_노드_찾기(인덱스)]) {
            return this.왼쪽_자식_노드_찾기(인덱스);
        }
        if (this.배열[this.오른쪽_자식_노드_찾기(인덱스)] > this.배열[this.왼쪽_자식_노드_찾기(인덱스)]) {
            return this.오른쪽_자식_노드_찾기(인덱스);
        }
        else {
            return this.왼쪽_자식_노드_찾기(인덱스);
        }
    }
    왼쪽_자식_노드_찾기(인덱스) {
        return 인덱스 * 2 + 1;
    }
    오른쪽_자식_노드_찾기(인덱스) {
        return 인덱스 * 2 + 2;
    }
    부모_노드_찾기(인덱스) {
        return Math.trunc((인덱스 - 1) / 2);
    }
}
const $힙 = new 힙();
$힙.삽입(10);
$힙.삽입(9);
$힙.삽입(8);
$힙.삽입(6);
$힙.삽입(5);
$힙.삽입(7);
$힙.삽입(4);
$힙.삽입(2);
$힙.삽입(1);
$힙.삽입(3);
$힙.삽입(11);
console.log($힙.루트_노드_읽기()); // 11
$힙.삭제();
console.log($힙.루트_노드_읽기()); // 10
$힙.삭제();
console.log($힙.루트_노드_읽기()); // 9
