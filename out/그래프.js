class 정점 {
    값;
    이웃_배열 = [];
    constructor(값) {
        this.값 = 값;
    }
    이웃_추가하기_방향(새_정점) {
        this.이웃_배열.push(새_정점);
    }
    이웃_추가하기_무방향(새_정점) {
        this.이웃_배열.push(새_정점);
        새_정점.이웃_배열.push(this);
    }
    깊이_우선_순회하기(정점, 방문한_정점_해시 = {}) {
        방문한_정점_해시[정점.값] = true;
        console.log(정점.값);
        for (const 이웃 of 정점.이웃_배열) {
            if (방문한_정점_해시[이웃.값]) {
                continue;
            }
            정점.깊이_우선_순회하기(이웃, 방문한_정점_해시);
        }
    }
    깊이_우선_탐색하기(정점, 탐색_값, 방문한_정점_해시 = {}) {
        if (정점.값 === 탐색_값) {
            return 정점;
        }
        방문한_정점_해시[정점.값] = true;
        for (const 이웃 of 정점.이웃_배열) {
            if (방문한_정점_해시[이웃.값]) {
                continue;
            }
            if (이웃.값 === 탐색_값) {
                return 이웃;
            }
            const 찾은_정점 = 정점.깊이_우선_탐색하기(이웃, 탐색_값, 방문한_정점_해시);
            if (찾은_정점) {
                return 찾은_정점;
            }
            return null;
        }
    }
    너비_우선_순회하기(시작_정점) {
        const 큐 = [];
        const 방문한_정점_배열 = {};
        방문한_정점_배열[시작_정점.값] = true;
        큐.push(시작_정점);
        while (큐.length) {
            const 현재_정점 = 큐.shift();
            console.log(현재_정점.값);
            for (const 이웃 of 현재_정점.이웃_배열) {
                if (방문한_정점_배열[이웃.값]) {
                    continue;
                }
                방문한_정점_배열[이웃.값] = true;
                큐.push(이웃);
            }
        }
    }
}
const $정점_앨리스 = new 정점('앨리스');
const $정점_밥 = new 정점('밥');
const $정점_신시아 = new 정점('신시아');
$정점_앨리스.이웃_추가하기_방향($정점_밥);
$정점_앨리스.이웃_추가하기_방향($정점_신시아);
$정점_밥.이웃_추가하기_방향($정점_신시아);
$정점_신시아.이웃_추가하기_방향($정점_밥);
$정점_앨리스.깊이_우선_순회하기($정점_앨리스); // 앨리스, 밥, 신시아
console.log($정점_앨리스.깊이_우선_탐색하기($정점_앨리스, '신시아')); // 정점 { '값': '신시아', '이웃_배열': [ 정점 { '값': '밥', '이웃_배열': [Array] } ] }
$정점_앨리스.너비_우선_순회하기($정점_앨리스); // 앨리스, 밥, 신시아
